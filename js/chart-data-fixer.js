// üî• Firebase Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨ Î∞è ÏàòÏ†ï Ïä§ÌÅ¨Î¶ΩÌä∏
class ChartDataFixer {
    constructor() {
        this.fixedCount = 0;
        this.deletedCount = 0;
        this.errorCount = 0;
    }

    // üî• Î™®Îì† ÏÇ¨Ïö©ÏûêÏùò Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨
    async fixAllUserChartData() {
        console.log('üîß Î™®Îì† ÏÇ¨Ïö©Ïûê Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨ ÏãúÏûë...');
        
        try {
            // Î™®Îì† chartStates Î¨∏ÏÑú Í∞ÄÏ†∏Ïò§Í∏∞
            const chartStatesSnapshot = await window.db.collection('chartStates').get();
            
            console.log(`üìä Ï¥ù ${chartStatesSnapshot.size}Í∞úÏùò Ï∞®Ìä∏ ÏÉÅÌÉú Î¨∏ÏÑú Î∞úÍ≤¨`);
            
            for (const doc of chartStatesSnapshot.docs) {
                await this.fixUserChartState(doc.id, doc.data());
            }
            
            console.log('‚úÖ Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨ ÏôÑÎ£å:', {
                fixed: this.fixedCount,
                deleted: this.deletedCount,
                errors: this.errorCount
            });
            
        } catch (error) {
            console.error('‚ùå Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨ Ïã§Ìå®:', error);
        }
    }

    // üî• Í∞úÎ≥Ñ ÏÇ¨Ïö©Ïûê Ï∞®Ìä∏ ÏÉÅÌÉú ÏàòÏ†ï
    async fixUserChartState(userId, data) {
        try {
            console.log(`üîß ÏÇ¨Ïö©Ïûê ${userId} Ï∞®Ìä∏ ÏÉÅÌÉú ÌôïÏù∏ Ï§ë...`);
            
            if (!data || !data.content) {
                console.warn(`‚ö†Ô∏è ÏÇ¨Ïö©Ïûê ${userId}: Ï∞®Ìä∏ ÏΩòÌÖêÏ∏† ÏóÜÏùå`);
                await this.deleteCorruptedChartState(userId);
                return;
            }

            const chartContent = data.content;
            
            // Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ Í≤ÄÏ¶ù
            if (!this.isValidChartData(chartContent)) {
                console.warn(`‚ö†Ô∏è ÏÇ¨Ïö©Ïûê ${userId}: ÏûòÎ™ªÎêú Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ Í∞êÏßÄ`);
                
                // ÏûêÎèô ÏàòÏ†ï ÏãúÎèÑ
                const fixedData = this.createValidChartData(chartContent);
                
                if (this.isValidChartData(fixedData)) {
                    await this.updateChartState(userId, {
                        ...data,
                        content: fixedData,
                        timestamp: Date.now(),
                        fixed: true,
                        fixedAt: Date.now()
                    });
                    
                    console.log(`‚úÖ ÏÇ¨Ïö©Ïûê ${userId}: Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏûêÎèô ÏàòÏ†ï ÏôÑÎ£å`);
                    this.fixedCount++;
                } else {
                    console.error(`‚ùå ÏÇ¨Ïö©Ïûê ${userId}: Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏûêÎèô ÏàòÏ†ï Ïã§Ìå®`);
                    await this.deleteCorruptedChartState(userId);
                }
            } else {
                console.log(`‚úÖ ÏÇ¨Ïö©Ïûê ${userId}: Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï†ïÏÉÅ`);
            }
            
        } catch (error) {
            console.error(`‚ùå ÏÇ¨Ïö©Ïûê ${userId} Ï∞®Ìä∏ ÏÉÅÌÉú ÏàòÏ†ï Ïã§Ìå®:`, error);
            this.errorCount++;
        }
    }

    // üî• Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Ïú†Ìö®ÏÑ± Í≤ÄÏ¶ù (Í∞ïÌôîÎêú Î≤ÑÏ†Ñ)
    isValidChartData(data) {
        if (!data || typeof data !== 'object') {
            return false;
        }

        // ÏÉàÎ°úÏö¥ Í≤ÄÏ¶ùÍ∏∞ ÏÇ¨Ïö©
        if (window.chartDataValidator) {
            const integrity = window.chartDataValidator.checkDataIntegrity(data);
            return integrity.isValid;
        }

        // Í∏∞Ï°¥ Í≤ÄÏ¶ù Î°úÏßÅ (Î∞±ÏóÖÏö©)
        // ÌïÑÏàò ÌïÑÎìú ÌôïÏù∏
        if (!data.layout || !data.charts) {
            return false;
        }

        // charts Î∞∞Ïó¥ ÌôïÏù∏
        if (!Array.isArray(data.charts)) {
            return false;
        }

        // Í∞Å Ï∞®Ìä∏ Íµ¨Ï°∞ ÌôïÏù∏
        for (const chart of data.charts) {
            if (!chart || typeof chart !== 'object') {
                return false;
            }

            if (!chart.panes || !Array.isArray(chart.panes)) {
                return false;
            }

            // Í∞Å pane ÌôïÏù∏
            for (const pane of chart.panes) {
                if (!pane || typeof pane !== 'object') {
                    return false;
                }

                if (!pane.sources || !Array.isArray(pane.sources)) {
                    return false;
                }

                // üî• PriceScale ÏÜçÏÑ± ÌôïÏù∏
                if (!pane.leftAxisState || !pane.leftAxisState.priceScaleSelectionStrategyName) {
                    return false;
                }

                if (!pane.rightAxisState || !pane.rightAxisState.priceScaleSelectionStrategyName) {
                    return false;
                }
            }
        }

        return true;
    }

    // üî• Ïú†Ìö®Ìïú Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± (ÏïàÏ†ÑÏÑ± Í∞ïÌôî)
    createValidChartData(originalData) {
        // ÏÉàÎ°úÏö¥ Í≤ÄÏ¶ùÍ∏∞ ÏÇ¨Ïö©
        if (window.chartDataValidator) {
            return window.chartDataValidator.validateAndFix(originalData);
        }

        // Í∏∞Ï°¥ Î°úÏßÅ (Î∞±ÏóÖÏö©)
        const defaultChartData = {
            layout: "s",
            charts: [{
                panes: [{
                    sources: [{
                        type: "MainSeries",
                        id: "main_series",
                        state: {
                            style: 1,
                            esdShowDividends: true,
                            esdShowSplits: true,
                            esdShowEarnings: true,
                            esdShowBreaks: false,
                            esdFlagSize: 2,
                            showCountdown: false,
                            showInDataWindow: true,
                            visible: true,
                            showPriceLine: true,
                            priceLineWidth: 1,
                            priceLineColor: "",
                            baseLineColor: "#B2B5BE",
                            showPrevClose: false,
                            minTick: "default",
                            priceFormat: {
                                type: "price",
                                precision: 2,
                                minMove: 0.01
                            }
                        }
                    }],
                    leftAxisState: {
                        priceScaleSelectionStrategyName: 'auto',
                        mode: 0,
                        autoScale: true,
                        invertScale: false,
                        alignLabels: true,
                        scaleMargins: { top: 0.2, bottom: 0.2 },
                        borderVisible: true,
                        borderColor: '#2962FF',
                        textColor: '#787B86',
                        fontSize: 11,
                        visible: false
                    },
                    rightAxisState: {
                        priceScaleSelectionStrategyName: 'auto',
                        mode: 0,
                        autoScale: true,
                        invertScale: false,
                        alignLabels: true,
                        scaleMargins: { top: 0.2, bottom: 0.2 },
                        borderVisible: true,
                        borderColor: '#2962FF',
                        textColor: '#787B86',
                        fontSize: 11,
                        visible: true
                    }
                }]
            }]
        };

        // ÏõêÎ≥∏ Îç∞Ïù¥ÌÑ∞ÏóêÏÑú Î≥µÍµ¨ Í∞ÄÎä•Ìïú Î∂ÄÎ∂Ñ Ï∂îÏ∂ú
        if (originalData && typeof originalData === 'object') {
            // layout Î≥µÍµ¨
            if (originalData.layout) {
                defaultChartData.layout = originalData.layout;
            }

            // charts Î∞∞Ïó¥ Î≥µÍµ¨ ÏãúÎèÑ
            if (originalData.charts && Array.isArray(originalData.charts)) {
                const validCharts = [];
                
                for (const chart of originalData.charts) {
                    if (chart && typeof chart === 'object') {
                        const validChart = { panes: [] };
                        
                        // panes Î≥µÍµ¨ ÏãúÎèÑ
                        if (chart.panes && Array.isArray(chart.panes)) {
                            for (const pane of chart.panes) {
                                if (pane && typeof pane === 'object') {
                                    const validPane = { 
                                        sources: [],
                                        leftAxisState: defaultChartData.charts[0].panes[0].leftAxisState,
                                        rightAxisState: defaultChartData.charts[0].panes[0].rightAxisState
                                    };
                                    
                                    // sources Î≥µÍµ¨ ÏãúÎèÑ
                                    if (pane.sources && Array.isArray(pane.sources)) {
                                        validPane.sources = pane.sources.filter(source => 
                                            source && typeof source === 'object'
                                        );
                                    }
                                    
                                    // Îπà sources Î∞∞Ïó¥Ïù∏ Í≤ΩÏö∞ Í∏∞Î≥∏ source Ï∂îÍ∞Ä
                                    if (validPane.sources.length === 0) {
                                        validPane.sources = defaultChartData.charts[0].panes[0].sources;
                                    }

                                    // üî• PriceScale ÏÉÅÌÉú Î≥µÍµ¨ (ÏïàÏ†ÑÏÑ± Î≥¥Ïû•)
                                    if (pane.leftAxisState && typeof pane.leftAxisState === 'object') {
                                        validPane.leftAxisState = {
                                            ...defaultChartData.charts[0].panes[0].leftAxisState,
                                            ...pane.leftAxisState,
                                            priceScaleSelectionStrategyName: pane.leftAxisState.priceScaleSelectionStrategyName || 'auto'
                                        };
                                    }

                                    if (pane.rightAxisState && typeof pane.rightAxisState === 'object') {
                                        validPane.rightAxisState = {
                                            ...defaultChartData.charts[0].panes[0].rightAxisState,
                                            ...pane.rightAxisState,
                                            priceScaleSelectionStrategyName: pane.rightAxisState.priceScaleSelectionStrategyName || 'auto'
                                        };
                                    }
                                    
                                    validChart.panes.push(validPane);
                                }
                            }
                        }
                        
                        // Îπà panes Î∞∞Ïó¥Ïù∏ Í≤ΩÏö∞ Í∏∞Î≥∏ pane Ï∂îÍ∞Ä
                        if (validChart.panes.length === 0) {
                            validChart.panes = defaultChartData.charts[0].panes;
                        }
                        
                        validCharts.push(validChart);
                    }
                }
                
                // Ïú†Ìö®Ìïú Ï∞®Ìä∏Í∞Ä ÏûàÏúºÎ©¥ ÏÇ¨Ïö©
                if (validCharts.length > 0) {
                    defaultChartData.charts = validCharts;
                }
            }
        }

        return defaultChartData;
    }

    // üî• Ï∞®Ìä∏ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    async updateChartState(userId, newData) {
        try {
            await window.db.collection('chartStates').doc(userId).set(newData);
            console.log(`‚úÖ ÏÇ¨Ïö©Ïûê ${userId} Ï∞®Ìä∏ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å`);
        } catch (error) {
            console.error(`‚ùå ÏÇ¨Ïö©Ïûê ${userId} Ï∞®Ìä∏ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:`, error);
            throw error;
        }
    }

    // üî• ÏÜêÏÉÅÎêú Ï∞®Ìä∏ ÏÉÅÌÉú ÏÇ≠Ï†ú
    async deleteCorruptedChartState(userId) {
        try {
            await window.db.collection('chartStates').doc(userId).delete();
            console.log(`üóëÔ∏è ÏÇ¨Ïö©Ïûê ${userId} ÏÜêÏÉÅÎêú Ï∞®Ìä∏ ÏÉÅÌÉú ÏÇ≠Ï†ú ÏôÑÎ£å`);
            this.deletedCount++;
        } catch (error) {
            console.error(`‚ùå ÏÇ¨Ïö©Ïûê ${userId} Ï∞®Ìä∏ ÏÉÅÌÉú ÏÇ≠Ï†ú Ïã§Ìå®:`, error);
            this.errorCount++;
        }
    }

    // üî• ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏàòÏ†ï
    async fixCurrentUserChartData() {
        if (!window.currentUser) {
            console.warn('‚ö†Ô∏è Î°úÍ∑∏Ïù∏Îêú ÏÇ¨Ïö©ÏûêÍ∞Ä ÏóÜÏäµÎãàÎã§');
            return false;
        }

        console.log(`üîß ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê (${window.currentUser.uid}) Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏàòÏ†ï ÏãúÏûë...`);
        
        try {
            const doc = await window.db.collection('chartStates').doc(window.currentUser.uid).get();
            
            if (!doc.exists) {
                console.log('üì≠ Ï†ÄÏû•Îêú Ï∞®Ìä∏ ÏÉÅÌÉúÍ∞Ä ÏóÜÏäµÎãàÎã§');
                return true;
            }

            const data = doc.data();
            await this.fixUserChartState(window.currentUser.uid, data);
            
            console.log('‚úÖ ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏàòÏ†ï ÏôÑÎ£å');
            return true;
            
        } catch (error) {
            console.error('‚ùå ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏàòÏ†ï Ïã§Ìå®:', error);
            return false;
        }
    }

    // üî• Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÌÜµÍ≥Ñ ÌôïÏù∏
    async getChartDataStats() {
        try {
            const snapshot = await window.db.collection('chartStates').get();
            
            let validCount = 0;
            let invalidCount = 0;
            let emptyCount = 0;
            
            for (const doc of snapshot.docs) {
                const data = doc.data();
                
                if (!data || !data.content) {
                    emptyCount++;
                } else if (this.isValidChartData(data.content)) {
                    validCount++;
                } else {
                    invalidCount++;
                }
            }
            
            const stats = {
                total: snapshot.size,
                valid: validCount,
                invalid: invalidCount,
                empty: emptyCount
            };
            
            console.log('üìä Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÌÜµÍ≥Ñ:', stats);
            return stats;
            
        } catch (error) {
            console.error('‚ùå Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÌÜµÍ≥Ñ ÌôïÏù∏ Ïã§Ìå®:', error);
            return null;
        }
    }
}

// üî• Ï†ÑÏó≠ÏúºÎ°ú ÎÇ¥Î≥¥ÎÇ¥Í∏∞
if (typeof window !== 'undefined') {
    window.ChartDataFixer = ChartDataFixer;
    window.chartDataFixer = new ChartDataFixer();
    
    // ÎîîÎ≤ÑÍπÖ Ìï®ÏàòÎì§
    window.fixCurrentUserChart = () => window.chartDataFixer.fixCurrentUserChartData();
    window.fixAllCharts = () => window.chartDataFixer.fixAllUserChartData();
    window.getChartStats = () => window.chartDataFixer.getChartDataStats();
} else {
    module.exports = ChartDataFixer;
} 