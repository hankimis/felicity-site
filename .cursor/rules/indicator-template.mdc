# üöÄ Quick Indicator Template

## üìã **Essential Checklist for New Indicators**

### **1. File Structure**
```
asset/[indicator-name]/
‚îî‚îÄ‚îÄ index.html
```

### **2. HTML Template (Copy & Modify)**
```html
<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>[Indicator Name]: [Description] - Onbit</title>
  <meta name="description" content="Î∞îÏù¥ÎÇ∏Ïä§ API Í∏∞Î∞ò [Indicator Description]">
  
  <!-- Preconnect to external domains -->
  <link rel="preconnect" href="https://api.binance.com">
  <link rel="preconnect" href="https://cdnjs.cloudflare.com">
  <link rel="preconnect" href="https://cdn.jsdelivr.net">
  
  <!-- Critical CSS -->
  <link rel="stylesheet" href="../css/sidebar.css">
  <style>
    :root {
      --bg-primary: #1a1a1a;
      --bg-secondary: #2a2a2a;
      --text-primary: #ffffff;
      --text-secondary: #cccccc;
      --accent-blue: #3b82f6;
      --border-default: #404040;
      --shadow-light: rgba(0, 0, 0, 0.3);
      --chart-bg: #1e1e1e;
      --grid-color: #333333;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Pretendard', -apple-system, BlinkMacSystemFont, sans-serif;
    }

    body {
      background-color: var(--bg-primary);
      color: var(--text-primary);
      line-height: 1.6;
    }

    .container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 20px;
    }

    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 30px;
      padding: 20px;
      background: var(--bg-secondary);
      border-radius: 12px;
    }

    .title-section h1 {
      font-size: 24px;
      font-weight: 600;
      margin-bottom: 8px;
    }

    .title-section p {
      color: var(--text-secondary);
      font-size: 14px;
    }

    .chart-container {
      background: var(--chart-bg);
      border-radius: 12px;
      padding: 20px;
      margin-bottom: 20px;
      position: relative;
      min-height: 600px;
    }

    .chart-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .chart-title {
      font-size: 18px;
      font-weight: 600;
    }

    .chart-controls {
      display: flex;
      gap: 10px;
    }

    .timeframe-btn {
      padding: 6px 12px;
      border: 1px solid var(--border-default);
      border-radius: 6px;
      background: var(--bg-primary);
      color: var(--text-secondary);
      cursor: pointer;
      font-size: 12px;
      transition: all 0.3s ease;
    }

    .timeframe-btn.active {
      background: var(--accent-blue);
      color: white;
      border-color: var(--accent-blue);
    }

    .chart-area {
      position: relative;
      height: 500px;
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 8px;
      overflow: hidden;
      background: var(--chart-bg);
    }

    .loading {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
      color: var(--text-secondary);
    }

    .loading-spinner {
      width: 40px;
      height: 40px;
      border: 3px solid var(--border-default);
      border-top: 3px solid var(--accent-blue);
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-right: 15px;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .legend {
      display: flex;
      gap: 20px;
      margin-top: 15px;
      padding: 15px;
      background: var(--bg-secondary);
      border-radius: 8px;
    }

    .legend-item {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 14px;
    }

    .legend-dot {
      width: 12px;
      height: 12px;
      border-radius: 50%;
    }

    .stats-panel {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }

    .stat-card {
      background: var(--bg-secondary);
      padding: 20px;
      border-radius: 12px;
      border: 1px solid var(--border-default);
    }

    .stat-title {
      font-size: 14px;
      color: var(--text-secondary);
      margin-bottom: 8px;
    }

    .stat-value {
      font-size: 24px;
      font-weight: 600;
      color: var(--text-primary);
    }

    .description-section {
      background: var(--bg-secondary);
      padding: 20px;
      border-radius: 12px;
      margin-top: 20px;
    }

    .description-section h3 {
      font-size: 18px;
      margin-bottom: 15px;
    }

    .description-section p {
      color: var(--text-secondary);
      line-height: 1.6;
      margin-bottom: 10px;
    }

    .watermark {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      color: rgba(255, 255, 255, 0.1);
      font-size: 48px;
      font-weight: bold;
      pointer-events: none;
      z-index: 1;
    }
  </style>
</head>
<body>
  <div class="container">
    <!-- Header Section -->
    <div class="header">
      <div class="title-section">
        <h1>[Indicator Title]</h1>
        <p>[Brief Description]</p>
      </div>
      <div class="controls">
        <div class="control-group">
          <label for="symbol-select">Ïã¨Î≥º:</label>
          <select id="symbol-select">
            <option value="BTCUSDT">BTCUSDT</option>
            <option value="ETHUSDT">ETHUSDT</option>
          </select>
        </div>
      </div>
    </div>

    <!-- Chart Container -->
    <div class="chart-container">
      <div class="chart-header">
        <div class="chart-title">[Chart Title]</div>
        <div class="chart-controls">
          <button class="timeframe-btn" data-period="1d">1Ïùº</button>
          <button class="timeframe-btn" data-period="1w">1Ï£º</button>
          <button class="timeframe-btn" data-period="1m">1Ïõî</button>
          <button class="timeframe-btn" data-period="1y">1ÎÖÑ</button>
          <button class="timeframe-btn active" data-period="all">Ï†ÑÏ≤¥</button>
        </div>
      </div>
      <div class="chart-area" id="chart-area">
        <div class="loading">
          <div class="loading-spinner"></div>
          Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ï§ë...
        </div>
      </div>
    </div>

    <!-- Legend -->
    <div class="legend">
      <div class="legend-item">
        <div class="legend-dot" style="background: #ffffff;"></div>
        <span>Í∞ÄÍ≤©</span>
      </div>
      <div class="legend-item">
        <div class="legend-dot" style="background: #3b82f6;"></div>
        <span>[Data Name]</span>
      </div>
    </div>

    <!-- Stats Panel -->
    <div class="stats-panel">
      <div class="stat-card">
        <div class="stat-title">ÌòÑÏû¨ Í∞í</div>
        <div class="stat-value" id="current-value">-</div>
      </div>
      <div class="stat-card">
        <div class="stat-title">ÏµúÍ≥†Í∞í</div>
        <div class="stat-value" id="max-value">-</div>
      </div>
      <div class="stat-card">
        <div class="stat-title">ÏµúÏ†ÄÍ∞í</div>
        <div class="stat-value" id="min-value">-</div>
      </div>
      <div class="stat-card">
        <div class="stat-title">ÌèâÍ∑†Í∞í</div>
        <div class="stat-value" id="avg-value">-</div>
      </div>
    </div>

    <!-- Description Section -->
    <div class="description-section">
      <h3>Ï∞®Ìä∏ ÏÑ§Î™Ö</h3>
      <p>[Detailed explanation of the indicator]</p>
      <p>[How to interpret the data]</p>
      <p>[What the values mean]</p>
    </div>
  </div>

  <!-- Scripts -->
  <script src="../js/sidebar.js"></script>
  <script>
    class [IndicatorName]Manager {
      constructor() {
        this.currentSymbol = 'BTCUSDT';
        this.currentPeriod = 'all';
        this.chart = null;
        this.init();
      }

      init() {
        this.loadScripts();
        this.bindEvents();
        this.loadData();
      }

      async loadScripts() {
        // Load Chart.js
        if (!window.Chart) {
          await this.loadScript('https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.js');
        }
        
        // Load date-fns
        if (!window.dateFns) {
          await this.loadScript('https://cdn.jsdelivr.net/npm/date-fns@2.30.0/index.min.js');
        }
        
        // Load Chart.js time adapter
        if (!window.ChartTimeAdapter) {
          await this.loadScript('https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@3.0.0/dist/chartjs-adapter-date-fns.bundle.min.js');
        }
      }

      loadScript(src) {
        return new Promise((resolve, reject) => {
          const script = document.createElement('script');
          script.src = src;
          script.onload = resolve;
          script.onerror = reject;
          document.head.appendChild(script);
        });
      }

      bindEvents() {
        // Symbol selector
        document.getElementById('symbol-select').addEventListener('change', (e) => {
          this.currentSymbol = e.target.value;
          this.loadData();
        });

        // Timeframe buttons
        document.querySelectorAll('.timeframe-btn').forEach(btn => {
          btn.addEventListener('click', (e) => {
            document.querySelectorAll('.timeframe-btn').forEach(b => b.classList.remove('active'));
            e.target.classList.add('active');
            this.currentPeriod = e.target.dataset.period;
            this.loadData();
          });
        });
      }

      async loadData() {
        try {
          this.showLoading();
          const data = await this.fetchData();
          await this.renderChart(data);
          this.updateStats(data);
        } catch (error) {
          this.handleError(error);
        } finally {
          this.hideLoading();
        }
      }

      async fetchData() {
        // Implement your data fetching logic here
        const limit = this.getLimitByPeriod();
        const url = `https://api.binance.com/api/v3/[endpoint]?symbol=${this.currentSymbol}&limit=${limit}`;
        
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 10000);
        
        try {
          const response = await fetch(url, {
            signal: controller.signal,
            headers: { 'Accept': 'application/json' }
          });
          
          clearTimeout(timeoutId);
          
          if (!response.ok) {
            throw new Error(`API request failed: ${response.status}`);
          }
          
          return await response.json();
        } catch (error) {
          clearTimeout(timeoutId);
          throw new Error(`Data loading failed: ${error.message}`);
        }
      }

      getLimitByPeriod() {
        const limits = {
          '1d': 24,
          '1w': 168,
          '1m': 720,
          '1y': 8760,
          'all': 1000
        };
        return limits[this.currentPeriod] || 1000;
      }

      async renderChart(data) {
        const chartArea = document.getElementById('chart-area');
        chartArea.innerHTML = '';
        
        // Create canvas
        const canvas = document.createElement('canvas');
        canvas.id = 'indicator-chart';
        canvas.style.width = '100%';
        canvas.style.height = '100%';
        chartArea.appendChild(canvas);
        
        // Add watermark
        const watermark = document.createElement('div');
        watermark.className = 'watermark';
        watermark.textContent = 'Onbit';
        chartArea.appendChild(watermark);

        // Destroy previous chart
        if (this.chart) {
          this.chart.destroy();
        }

        // Check if Chart.js is loaded
        if (!window.Chart) {
          throw new Error('Chart.jsÍ∞Ä Î°úÎìúÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
        }

        // Process data for chart
        const chartData = this.processDataForChart(data);

        // Create chart
        this.chart = new Chart(canvas, {
          type: 'line', // or 'bar', 'scatter'
          data: {
            datasets: [
              {
                label: 'Í∞ÄÍ≤©',
                data: chartData.priceData,
                borderColor: '#ffffff',
                backgroundColor: 'rgba(255, 255, 255, 0.1)',
                borderWidth: 2,
                fill: false,
                yAxisID: 'y'
              },
              {
                label: '[Data Name]',
                data: chartData.indicatorData,
                borderColor: '#3b82f6',
                backgroundColor: 'rgba(59, 130, 246, 0.1)',
                borderWidth: 2,
                fill: false,
                yAxisID: 'y1'
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            interaction: {
              intersect: false,
              mode: 'index'
            },
            plugins: {
              legend: {
                display: false
              },
              tooltip: {
                enabled: true,
                backgroundColor: 'rgba(0, 0, 0, 0.9)',
                titleColor: '#ffffff',
                bodyColor: '#ffffff',
                borderColor: '#333333',
                borderWidth: 1,
                cornerRadius: 6,
                displayColors: false,
                callbacks: {
                  title: function(context) {
                    const dataPoint = context[0].raw;
                    const date = new Date(dataPoint.x);
                    return date.toISOString().split('T')[0].replace(/-/g, ' ') + ' UTC';
                  },
                  label: function(context) {
                    const dataPoint = context.raw;
                    return `${context.dataset.label}: ${dataPoint.y.toFixed(4)}`;
                  }
                }
              }
            },
            scales: {
              x: {
                type: 'time',
                time: {
                  unit: 'day',
                  displayFormats: {
                    day: 'yyyy MM dd'
                  }
                },
                grid: {
                  color: 'rgba(255, 255, 255, 0.1)',
                  borderColor: 'rgba(255, 255, 255, 0.1)',
                  borderDash: [5, 5]
                },
                ticks: {
                  color: '#cccccc',
                  maxTicksLimit: 8,
                  font: { size: 11 }
                }
              },
              y: {
                type: 'linear',
                position: 'right',
                grid: {
                  color: 'rgba(255, 255, 255, 0.1)',
                  borderColor: 'rgba(255, 255, 255, 0.1)',
                  borderDash: [5, 5]
                },
                ticks: {
                  color: '#cccccc',
                  font: { size: 11 }
                }
              },
              y1: {
                type: 'linear',
                position: 'left',
                grid: {
                  drawOnChartArea: false
                },
                ticks: {
                  color: '#cccccc',
                  font: { size: 11 }
                }
              }
            }
          }
        });
      }

      processDataForChart(data) {
        // Implement your data processing logic here
        // Return format: { priceData: [...], indicatorData: [...] }
        return {
          priceData: [],
          indicatorData: []
        };
      }

      updateStats(data) {
        // Implement your statistics update logic here
        document.getElementById('current-value').textContent = '-';
        document.getElementById('max-value').textContent = '-';
        document.getElementById('min-value').textContent = '-';
        document.getElementById('avg-value').textContent = '-';
      }

      showLoading() {
        const chartArea = document.getElementById('chart-area');
        chartArea.innerHTML = `
          <div class="loading">
            <div class="loading-spinner"></div>
            Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ï§ë...
          </div>
        `;
      }

      hideLoading() {
        // Loading will be hidden when chart is rendered
      }

      handleError(error) {
        console.error('Data loading failed:', error);
        const chartArea = document.getElementById('chart-area');
        chartArea.innerHTML = `
          <div class="error-message">
            <p>Îç∞Ïù¥ÌÑ∞ Î°úÎî©Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.</p>
            <button onclick="location.reload()">Îã§Ïãú ÏãúÎèÑ</button>
          </div>
        `;
      }
    }

    // Initialize the manager
    new [IndicatorName]Manager();
  </script>
</body>
</html>
```

### **3. Sidebar Integration**
Add to `asset/js/sidebar.js`:

```javascript
// In menu structure
<div class="menu-item" data-page="[indicator-name]">
  <span class="menu-item-text">[Indicator Display Name]</span>
  <span class="menu-item-arrow">‚ñ∂</span>
</div>

// In routing
case '[indicator-name]':
  if (!currentPath.includes('/asset/[indicator-name]/')) {
    shouldNavigate = true;
  }
  break;

// In navigation
case '[indicator-name]':
  window.location.href = '/asset/[indicator-name]/';
  break;
```

### **4. Required Customizations**
- Replace `[Indicator Name]` with actual indicator name
- Replace `[Description]` with brief description
- Replace `[Data Name]` with indicator data name
- Implement `fetchData()` method for your API endpoint
- Implement `processDataForChart()` method for data formatting
- Implement `updateStats()` method for statistics display
- Add appropriate legend items
- Customize chart type (line, bar, scatter)
- Add indicator-specific colors and styling

### **5. Testing Checklist**
- [ ] Page loads without errors
- [ ] Chart renders correctly
- [ ] Timeframe buttons work
- [ ] Symbol selector works
- [ ] Statistics update properly
- [ ] Responsive on mobile
- [ ] Sidebar navigation works
- [ ] Error handling works
- [ ] Loading states display correctly

---

## üéØ **Quick Reference**

### **File Naming**
- Directory: `kebab-case` (e.g., `volume-bubble-map`)
- Class: `PascalCase` (e.g., `VolumeBubbleMapManager`)

### **Color Standards**
- Primary: `#3b82f6` (Blue)
- Positive: `#10b981` (Green)
- Negative: `#ef4444` (Red)
- Neutral: `#666666` (Gray)
- Price: `#ffffff` (White)

### **API Pattern**
```javascript
const url = `https://api.binance.com/api/v3/[endpoint]?symbol=${this.currentSymbol}&limit=${limit}`;
```

### **Chart Configuration**
- Type: `line`, `bar`, or `scatter`
- Time axis: Always use `time` type with date-fns adapter
- Grid: `rgba(255, 255, 255, 0.1)` with dashed lines
- Tooltips: Dark theme with white text

---

*Use this template as a starting point and customize as needed for your specific indicator.*
description:
globs:
alwaysApply: false
---
