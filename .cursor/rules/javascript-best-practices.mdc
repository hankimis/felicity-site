---
description:
globs:
alwaysApply: false
---
# JavaScript Best Practices & Error Prevention

## FUNCTION DEFINITION & SCOPE MANAGEMENT

### GLOBAL FUNCTION DECLARATIONS
```javascript
// ✅ CORRECT: Proper global function declaration
function initializeTradingViewChart(symbol = 'BTCUSDT') {
  // Function implementation
}

// ❌ WRONG: Function inside event listener without proper scope
document.addEventListener('DOMContentLoaded', function() {
  function someFunction() { } // Not accessible globally
});
```

### VARIABLE SCOPE & HOISTING
```javascript
// ✅ CORRECT: Proper variable declarations
let tradingViewWidget = null;
const currentChartSymbol = 'BTCUSDT';

// ❌ WRONG: Undeclared variables (creates globals)
someVariable = 'value'; // Avoid this
```

## EVENT HANDLING BEST PRACTICES

### DOM ELEMENT VALIDATION
```javascript
// ✅ CORRECT: Always check element existence
const chartSymbol = document.getElementById('chart-symbol');
if (chartSymbol) {
  chartSymbol.addEventListener('change', handleSymbolChange);
} else {
  console.warn('Chart symbol element not found');
}

// ❌ WRONG: Assuming element exists
document.getElementById('chart-symbol').addEventListener('change', handler);
```

### EVENT DELEGATION FOR DYNAMIC CONTENT
```javascript
// ✅ CORRECT: Event delegation for table rows
document.addEventListener('click', function(e) {
  if (e.target.matches('.crypto-row .chart-btn')) {
    handleChartClick(e.target);
  }
});

// ❌ WRONG: Binding events to non-existent elements
document.querySelectorAll('.crypto-row').forEach(row => {
  // These elements might not exist yet
});
```

## ASYNC/AWAIT & PROMISE HANDLING

### API CALLS WITH PROPER ERROR HANDLING
```javascript
// ✅ CORRECT: Comprehensive error handling
async function loadCryptoData() {
  try {
    const response = await fetch(apiUrl);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const data = await response.json();
    
    if (!Array.isArray(data)) {
      throw new Error('Invalid data format received');
    }
    
    return data;
  } catch (error) {
    console.error('❌ API call failed:', error);
    return getFallbackData(); // Always provide fallback
  }
}

// ❌ WRONG: No error handling
async function loadData() {
  const response = await fetch(apiUrl);
  return response.json(); // Can throw errors
}
```

### PARALLEL API CALLS
```javascript
// ✅ CORRECT: Parallel execution with error handling
async function loadMultiplePages() {
  const pagePromises = [1, 2, 3, 4].map(page => 
    fetch(`${baseUrl}?page=${page}`).catch(err => ({ error: err, page }))
  );
  
  const results = await Promise.allSettled(pagePromises);
  
  const successfulResults = results
    .filter(result => result.status === 'fulfilled' && !result.value.error)
    .map(result => result.value);
    
  return successfulResults;
}
```

## THIRD-PARTY LIBRARY INTEGRATION

### TRADINGVIEW WIDGET MANAGEMENT
```javascript
// ✅ CORRECT: Proper widget lifecycle management
let tradingViewWidget = null;

function initializeTradingViewChart(symbol = 'BTCUSDT') {
  // 1. Validate container
  const container = document.getElementById('tradingview_chart');
  if (!container) {
    console.warn('Chart container not found');
    return;
  }
  
  // 2. Check library availability
  if (!window.TradingView) {
    console.warn('TradingView library not loaded');
    return;
  }
  
  // 3. Clean up existing widget
  if (tradingViewWidget) {
    try {
      tradingViewWidget.remove();
    } catch (e) {
      console.warn('Error removing existing widget:', e);
    }
  }
  
  // 4. Clear container
  container.innerHTML = '';
  
  // 5. Create new widget
  try {
    tradingViewWidget = new TradingView.widget({
      container_id: 'tradingview_chart',
      symbol: `BINANCE:${symbol}`,
      // ... other options
    });
  } catch (error) {
    console.error('Failed to create TradingView widget:', error);
    showFallbackChart(container);
  }
}
```

### LIBRARY LOADING DETECTION
```javascript
// ✅ CORRECT: Robust library loading detection
function waitForLibrary(libraryCheck, maxAttempts = 50, interval = 100) {
  return new Promise((resolve, reject) => {
    let attempts = 0;
    
    const checkLibrary = () => {
      attempts++;
      
      if (libraryCheck()) {
        resolve();
      } else if (attempts >= maxAttempts) {
        reject(new Error('Library loading timeout'));
      } else {
        setTimeout(checkLibrary, interval);
      }
    };
    
    checkLibrary();
  });
}

// Usage
waitForLibrary(() => window.TradingView)
  .then(() => initializeTradingViewChart())
  .catch(error => console.error('Library loading failed:', error));
```

## DATA PROCESSING & VALIDATION

### SAFE DATA ACCESS
```javascript
// ✅ CORRECT: Safe property access with validation
function processApiResponse(data) {
  if (!data || typeof data !== 'object') {
    console.warn('Invalid data received');
    return [];
  }
  
  return data.map(item => ({
    id: item?.id || 'unknown',
    name: cleanText(item?.name || 'Unknown'),
    price: typeof item?.current_price === 'number' ? item.current_price : 0,
    change24h: item?.price_change_percentage_24h ?? 0,
    // Use nullish coalescing and optional chaining
  }));
}

// ✅ CORRECT: Text cleaning function
function cleanText(text) {
  if (typeof text !== 'string') return String(text || '');
  
  return text
    .replace(/[^\w\s-().]/g, '') // Remove special chars except allowed ones
    .replace(/\s+/g, ' ') // Normalize whitespace
    .trim();
}
```

### TYPE CHECKING & CONVERSION
```javascript
// ✅ CORRECT: Robust type checking
function formatPrice(value) {
  const price = Number(value);
  
  if (isNaN(price) || !isFinite(price)) {
    return '$0.00';
  }
  
  if (price < 0.01) {
    return `$${price.toFixed(6)}`;
  } else if (price < 1) {
    return `$${price.toFixed(4)}`;
  } else {
    return `$${price.toFixed(2)}`;
  }
}
```

## MEMORY MANAGEMENT & CLEANUP

### INTERVAL & TIMEOUT CLEANUP
```javascript
// ✅ CORRECT: Proper cleanup management
class DataManager {
  constructor() {
    this.intervals = new Set();
    this.timeouts = new Set();
  }
  
  setInterval(callback, delay) {
    const id = setInterval(callback, delay);
    this.intervals.add(id);
    return id;
  }
  
  setTimeout(callback, delay) {
    const id = setTimeout(() => {
      callback();
      this.timeouts.delete(id);
    }, delay);
    this.timeouts.add(id);
    return id;
  }
  
  cleanup() {
    this.intervals.forEach(id => clearInterval(id));
    this.timeouts.forEach(id => clearTimeout(id));
    this.intervals.clear();
    this.timeouts.clear();
  }
}
```

### EVENT LISTENER CLEANUP
```javascript
// ✅ CORRECT: Event listener management
class ComponentManager {
  constructor() {
    this.eventListeners = [];
  }
  
  addEventListener(element, event, handler, options) {
    element.addEventListener(event, handler, options);
    this.eventListeners.push({ element, event, handler, options });
  }
  
  removeAllEventListeners() {
    this.eventListeners.forEach(({ element, event, handler, options }) => {
      element.removeEventListener(event, handler, options);
    });
    this.eventListeners = [];
  }
}
```

## ERROR HANDLING PATTERNS

### GRACEFUL DEGRADATION
```javascript
// ✅ CORRECT: Graceful degradation with fallbacks
function initializeFeature() {
  try {
    // Primary feature implementation
    return initializePrimaryFeature();
  } catch (primaryError) {
    console.warn('Primary feature failed, trying fallback:', primaryError);
    
    try {
      return initializeFallbackFeature();
    } catch (fallbackError) {
      console.error('All features failed:', { primaryError, fallbackError });
      return initializeMinimalFeature();
    }
  }
}
```

### USER FEEDBACK FOR ERRORS
```javascript
// ✅ CORRECT: User-friendly error communication
function handleApiError(error, userMessage = 'Something went wrong') {
  // Log technical details for debugging
  console.error('API Error Details:', {
    message: error.message,
    stack: error.stack,
    timestamp: new Date().toISOString()
  });
  
  // Show user-friendly message
  showNotification(userMessage, 'error');
  
  // Return safe fallback data
  return getFallbackData();
}
```

## PERFORMANCE OPTIMIZATION

### DEBOUNCING & THROTTLING
```javascript
// ✅ CORRECT: Debounce for search inputs
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

// Usage
const debouncedSearch = debounce(performSearch, 300);
searchInput.addEventListener('input', debouncedSearch);
```

### EFFICIENT DOM MANIPULATION
```javascript
// ✅ CORRECT: Batch DOM updates
function updateTable(data) {
  const fragment = document.createDocumentFragment();
  
  data.forEach(item => {
    const row = createTableRow(item);
    fragment.appendChild(row);
  });
  
  const tbody = document.getElementById('crypto-table-body');
  tbody.innerHTML = ''; // Clear existing content
  tbody.appendChild(fragment); // Single DOM update
}
```

## DEBUGGING & LOGGING

### STRUCTURED LOGGING
```javascript
// ✅ CORRECT: Structured logging with context
const Logger = {
  info: (message, context = {}) => {
    console.log(`ℹ️ ${message}`, context);
  },
  
  warn: (message, context = {}) => {
    console.warn(`⚠️ ${message}`, context);
  },
  
  error: (message, error, context = {}) => {
    console.error(`❌ ${message}`, {
      error: error?.message || error,
      stack: error?.stack,
      ...context
    });
  },
  
  success: (message, context = {}) => {
    console.log(`✅ ${message}`, context);
  }
};

// Usage
Logger.info('Chart initialized', { symbol: 'BTCUSDT' });
Logger.error('API call failed', error, { url, params });
```

---

**KEY PRINCIPLES:**
1. **Always validate inputs and check for null/undefined**
2. **Implement proper error handling with fallbacks**
3. **Clean up resources (intervals, event listeners, widgets)**
4. **Use structured logging for better debugging**
5. **Test edge cases and error scenarios**
6. **Provide user feedback for all operations**
